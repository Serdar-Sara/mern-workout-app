
[1]]]önce exress ile server.js oluşturdu ve   node server.js   ile çalıştırdı


 **4000 is the port number where this server will listen for requests.
  A port is like a door on a computer that allows different applications to communicate.
  
 ** A callback function is a function that is passed as an argument to another function and is executed later,
  usually after an operation completes.
  
  function greet(name, callback) {
    console.log("Hello, " + name);
    callback(); // Calling the callback function
  }

  function sayGoodbye() {
    console.log("Goodbye!");
  }

 // Pass `sayGoodbye` as a callback
   greet("Serdar", sayGoodbye);


   An arrow function is a shorter way to write a function in JavaScript.     => 
         Arrow functions remove the need for function keyword.
         If there's only one expression, {} and return are not needed.

1)
   function add(a, b) {
    return a + b;
    }
    
2)    oktan sonrası return , öncesi parametre ve bunu bir değişkene eşitlermiş gibi yaz '=' kullanarak. 
      değişkenin önüne const yaz. değişken zaten fonkun ismi ile aynı.
    const add = (a, b) => a + b;

    ***parametre yoksa
    const sayHello = () => "Hello!";

    ***tek parametre
    const square= x=>x*x;    arguman parantez içinde DEĞİL



  ****birinci yerine ikinci tercih edilir callback fonsiyonlarda
    numbers.map(square);
    numbers.map(num => num * num);


const numbers = [1, 2, 3, 4];
const squares = numbers.map(num => num * num);
console.log(squares); // Output: [1, 4, 9, 16]

 */

 What is Nodemon?
Nodemon is a tool that automatically restarts your Node.js application when file changes are detected. 
This is useful during development because you don’t have to manually stop and restart your server every time you make a change.
If you change your code, you have to manually stop (Ctrl + C) and restart (node server.js).
This is time-consuming and annoying during development.

Install Globally (for all projects)
npm install -g nodemon
Now, you can use nodemon in any Node.js project.

once you download nodemon
instead of  node server.js    ,
write    nodemon server.js  şu an çalışıyor ve her update olduğunda otomatik düzeltip çalışaccak. durdurmak için yine ctrl c.

[[[2]]]  package.json a scriot etkledim
"dev": "nodemon server.js"
artık 
npm run dev 
yazabilirim ve çalışır  (server.js çalışacak)

[[[3]]]
route kısmını yazdım

[[[4]]]
.emv oluşturdum
A .env file is a configuration file used to store environment variables for your application.
It's typically used in Node.js, Python, and other environments to manage sensitive data like API keys, 
database credentials, or other configuration settings that should not be hardcoded directly in your code.

***bunu git ignora'a yükleyip, githup'ta yayılmasını önleyeceğiz

önce 
npm install dotenv 
deyip dotenv isimli node package'ı indir backende.
dotenv is a package that loads environmental variables from a 
dotenv file(we created it) into the process.env object awailable to us globally in a nodejs environment.
process.env is a built-in global object in Node.js that stores environment variables.

require('dotenv') vs. require('dotenv').config()
✅ require('dotenv') – Loads the dotenv module but does not apply any environment variables.
❌ require('dotenv') alone won’t work because it doesn't read the .env file.
✅ require('dotenv').config() – Loads the module and immediately calls config() to read .env variables into process.env.


[[[5]]]
What is Middleware?
Middleware is like a checkpoint that sits between the request (from the client) and the response (from the server).
Every time a user makes a request, it first passes through middleware before reaching the actual route (e.g., /home).
Middleware can modify, log, or validate the request before passing it to the next step.

Middleware is a function that runs between the client’s request and the server’s response.
It can modify the request/response objects, end the request-response cycle, or pass control to the next middleware.
Example uses: logging requests, authentication, parsing data, etc.
****app.use()
Purpose: Registers middleware that runs for every incoming request to your server.
Syntax: app.use([path], middlewareFunction)
If no path is specified (like in your code), it runs for all routes (e.g., /, /users, /api, etc.).
If a path is specified (e.g., app.use('/api', ...)), it runs only for requests to that path.

The Middleware Function: (req, res, next) => { ... }
Parameters:
req (Request Object): Contains data about the incoming HTTP request (URL, headers, query parameters, body, etc.).
res (Response Object): Used to send responses back to the client.
next (Function): Passes control to the next middleware in the chain. If you don’t call next(), the request will hang indefinitely.

**Middleware and route handlers execute in the order they’re written.

Basic Route Handler
app.get('/home', (req, res) => {
    res.send('Welcome to Home Page');
});
Breaking it Down:
app.get('/home', ...) → This listens for GET requests on /home.
(req, res) => { ... } → This is the route handler function.
res.send('Welcome to Home Page'); → This sends a response back to the user.
